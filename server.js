const express = require('express');
const cors = require('cors');
const path = require('path');
const fs = require('fs');
const fetch = require('node-fetch');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname)));

// Stockage en m√©moire (pour une version simple)
let users = {};
let evaluations = [];
let appointments = [];

// Route principale
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

// API Endpoints

// Sauvegarder une √©valuation
app.post('/api/evaluations', (req, res) => {
    const evaluation = {
        id: Date.now().toString(),
        userId: req.body.userId || 'anonymous',
        responses: req.body.responses,
        score: req.body.score,
        date: new Date().toISOString(),
        recommendations: generateRecommendations(req.body.score, req.body.responses)
    };
    
    evaluations.push(evaluation);
    
    res.json({
        success: true,
        evaluation: evaluation
    });
});

// R√©cup√©rer les √©valuations d'un utilisateur
app.get('/api/evaluations/:userId', (req, res) => {
    const userEvaluations = evaluations.filter(e => e.userId === req.params.userId);
    res.json(userEvaluations);
});

// Planifier un rendez-vous
app.post('/api/appointments', (req, res) => {
    const appointment = {
        id: Date.now().toString(),
        userId: req.body.userId || 'anonymous',
        type: req.body.type,
        date: req.body.date,
        time: req.body.time,
        description: req.body.description,
        status: 'scheduled',
        createdAt: new Date().toISOString()
    };
    
    appointments.push(appointment);
    
    res.json({
        success: true,
        appointment: appointment
    });
});

// R√©cup√©rer les rendez-vous d'un utilisateur
app.get('/api/appointments/:userId', (req, res) => {
    const userAppointments = appointments.filter(a => a.userId === req.params.userId);
    res.json(userAppointments);
});

// Endpoint pour l'IA (proxy vers Blackbox AI)
app.post('/api/chat', async (req, res) => {
    const { message, language, history, isPersonalized, checkInContext } = req.body;
    
    try {
        console.log('ü§ñ Appel BlackBox AI avec message:', message.substring(0, 100) + '...');
        
        // Construire un syst√®me prompt avanc√© pour le coaching bien-√™tre
        let systemPrompt = buildAdvancedWellnessPrompt(language, isPersonalized, checkInContext);
        
        // Construire l'historique des messages pour le contexte
        const messages = [
            { role: 'system', content: systemPrompt }
        ];
        
        // Ajouter l'historique r√©cent pour le contexte (max 4 messages)
        if (history && history.length > 0) {
            const recentHistory = history.slice(-4);
            messages.push(...recentHistory);
        }
        
        // Ajouter le message actuel
        messages.push({ role: 'user', content: message });
        
        let botResponse = null;
        
        // 1. Essayer BlackBox AI avec le format correct
        try {
            console.log('üì° Tentative BlackBox AI...');
            const blackboxResponse = await fetch('https://api.blackbox.ai/chat/completions', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer sk-Oqoog7SlO013R2GnSXEMew'
                },
                body: JSON.stringify({
                    model: 'blackboxai/openai/gpt-4',
                    messages: messages,
                    temperature: 0.7,
                    max_tokens: 500,
                    top_p: 0.9
                })
            });
            
            if (blackboxResponse.ok) {
                const data = await blackboxResponse.json();
                botResponse = data.choices?.[0]?.message?.content || data.response || data.message;
                console.log('‚úÖ R√©ponse BlackBox AI obtenue avec succ√®s');
            } else {
                console.log('‚ùå BlackBox AI erreur HTTP:', blackboxResponse.status);
                const errorText = await blackboxResponse.text();
                console.log('D√©tails erreur:', errorText);
            }
        } catch (error) {
            console.log('‚ùå Erreur BlackBox AI:', error.message);
        }
        
        // 2. Si BlackBox √©choue, utiliser notre syst√®me de r√©ponse intelligent
        if (!botResponse) {
            console.log('üß† G√©n√©ration de r√©ponse intelligente...');
            botResponse = generateIntelligentWellnessResponse(message, checkInContext, language, history);
        }
        
        // 3. Validation et am√©lioration de la r√©ponse
        botResponse = enhanceWellnessResponse(botResponse, checkInContext, language);
        
        res.json({
            success: true,
            response: botResponse,
            source: botResponse.includes('üß†') ? 'intelligent_fallback' : 'blackbox_ai'
        });
        
    } catch (error) {
        console.error('‚ùå Erreur g√©n√©rale API chat:', error);
        
        // R√©ponse de secours avec gestion d'erreur √©l√©gante
        const fallbackResponse = generateEmergencyWellnessResponse(language, error.message);
        res.json({
            success: true,
            response: fallbackResponse,
            source: 'emergency_fallback'
        });
    }
});

// Fonction pour construire un prompt syst√®me avanc√© pour le bien-√™tre
function buildAdvancedWellnessPrompt(language, isPersonalized, checkInContext) {
    const basePrompt = language === 'fr' 
        ? `Tu es un coach en bien-√™tre mental professionnel sp√©cialis√© dans l'accompagnement en milieu de travail. 

EXPERTISE:
- Psychologie positive et techniques de gestion du stress
- Coaching en d√©veloppement personnel et professionnel  
- M√©thodes valid√©es scientifiquement (TCC, mindfulness, etc.)
- Pr√©vention du burnout et promotion de la r√©silience

STYLE DE COMMUNICATION:
- Empathique, bienveillant et sans jugement
- R√©ponses concises (150-300 mots maximum)
- Conseils pratiques et imm√©diatement applicables
- Ton professionnel mais chaleureux
- Utilise des √©mojis avec parcimonie pour humaniser

APPROCHE:
- √âcoute active et validation des √©motions
- Questions ouvertes pour approfondir la r√©flexion
- Techniques concr√®tes adapt√©es au contexte professionnel
- Encouragement √† l'autonomie et √† l'auto-efficacit√©

INTERDICTIONS:
- Ne jamais donner de diagnostic m√©dical
- Ne pas remplacer un suivi psychologique professionnel
- √âviter les conseils g√©n√©riques ou r√©p√©titifs
- Ne pas minimiser les difficult√©s exprim√©es`

        : `You are a professional mental wellness coach specialized in workplace support.

EXPERTISE:
- Positive psychology and stress management techniques
- Personal and professional development coaching
- Scientifically validated methods (CBT, mindfulness, etc.)
- Burnout prevention and resilience building

COMMUNICATION STYLE:
- Empathetic, caring and non-judgmental
- Concise responses (150-300 words maximum)
- Practical, immediately applicable advice
- Professional yet warm tone
- Use emojis sparingly to humanize

APPROACH:
- Active listening and emotion validation
- Open questions to deepen reflection
- Concrete techniques adapted to work context
- Encourage autonomy and self-efficacy

RESTRICTIONS:
- Never provide medical diagnosis
- Don't replace professional psychological support
- Avoid generic or repetitive advice
- Don't minimize expressed difficulties`;

    // Ajouter le contexte personnalis√© si disponible
    if (isPersonalized && checkInContext) {
        const { score, responses, analysis } = checkInContext;
        
        const contextAddition = language === 'fr'
            ? `\n\nCONTEXTE UTILISATEUR ACTUEL:
- Score bien-√™tre global: ${score}%
- √ânergie: ${responses?.energy || 'N/A'}/10
- Stress: ${responses?.stress || 'N/A'}/10  
- Charge travail: ${responses?.workload || 'N/A'}/10
- Soutien √©quipe: ${responses?.support || 'N/A'}/10
- Satisfaction: ${responses?.satisfaction || 'N/A'}/10

${analysis?.concerns?.length > 0 ? `Pr√©occupations identifi√©es: ${analysis.concerns.join(', ')}` : ''}
${analysis?.strengths?.length > 0 ? `Points forts: ${analysis.strengths.join(', ')}` : ''}

Adapte tes conseils √† ce contexte sp√©cifique.`
            
            : `\n\nCURRENT USER CONTEXT:
- Overall wellbeing score: ${score}%
- Energy: ${responses?.energy || 'N/A'}/10
- Stress: ${responses?.stress || 'N/A'}/10
- Workload: ${responses?.workload || 'N/A'}/10
- Team support: ${responses?.support || 'N/A'}/10
- Satisfaction: ${responses?.satisfaction || 'N/A'}/10

${analysis?.concerns?.length > 0 ? `Identified concerns: ${analysis.concerns.join(', ')}` : ''}
${analysis?.strengths?.length > 0 ? `Strengths: ${analysis.strengths.join(', ')}` : ''}

Adapt your advice to this specific context.`;
        
        return basePrompt + contextAddition;
    }
    
    return basePrompt;
}

// Fonction pour g√©n√©rer une r√©ponse intelligente de bien-√™tre
function generateIntelligentWellnessResponse(message, checkInContext, language, history) {
    console.log('üß† G√©n√©ration de r√©ponse intelligente bas√©e sur l\'analyse...');
    
    // Analyser le message pour comprendre l'intention et l'√©motion
    const analysis = analyzeUserMessage(message, language);
    const contextualInsights = checkInContext ? analyzeCheckInContext(checkInContext) : null;
    
    // G√©n√©rer une r√©ponse personnalis√©e bas√©e sur l'analyse
    let response = '';
    
    // Commencer par une validation empathique
    response += generateEmpathicValidation(analysis, language);
    
    // Ajouter des conseils sp√©cifiques
    response += generateSpecificAdvice(analysis, contextualInsights, language);
    
    // Terminer par une question ou encouragement
    response += generateEngagementClosing(analysis, language);
    
    return response;
}

// Fonction pour analyser le message utilisateur
function analyzeUserMessage(message, language) {
    const lowerMessage = message.toLowerCase();
    
    const emotionKeywords = {
        stress: ['stress', 'stress√©', 'pression', 'anxieux', 'angoisse', 'tension', 'overwhelmed', 'anxious'],
        fatigue: ['fatigu√©', '√©puis√©', '√©nergie', 'crev√©', 'tired', 'exhausted', 'drained', 'burnout'],
        sadness: ['triste', 'd√©prim√©', 'moral', 'down', 'sad', 'depressed', 'low'],
        anger: ['col√®re', '√©nerv√©', 'frustr√©', 'angry', 'frustrated', 'irritated'],
        motivation: ['motivation', 'd√©motiv√©', 'envie', 'ennui', 'motivated', 'bored', 'purpose'],
        confidence: ['confiance', 'doute', 'capable', 'confidence', 'doubt', 'imposter'],
        relationships: ['√©quipe', 'coll√®gue', 'manager', 'team', 'colleague', 'boss', 'conflict'],
        workload: ['travail', 't√¢ches', 'deadline', 'work', 'tasks', 'busy', 'overload']
    };
    
    const detectedEmotions = [];
    const detectedTopics = [];
    
    for (const [emotion, keywords] of Object.entries(emotionKeywords)) {
        const matches = keywords.filter(keyword => lowerMessage.includes(keyword));
        if (matches.length > 0) {
            detectedEmotions.push(emotion);
            detectedTopics.push(...matches);
        }
    }
    
    // D√©tecter l'intensit√© √©motionnelle
    const intensityWords = ['tr√®s', 'vraiment', 'extremely', 'really', 'so', 'too', 'beaucoup'];
    const hasHighIntensity = intensityWords.some(word => lowerMessage.includes(word));
    
    return {
        emotions: detectedEmotions,
        topics: detectedTopics,
        intensity: hasHighIntensity ? 'high' : 'moderate',
        length: message.length,
        hasQuestion: message.includes('?') || lowerMessage.includes('comment') || lowerMessage.includes('how')
    };
}

// Fonction pour analyser le contexte du check-in
function analyzeCheckInContext(checkInContext) {
    if (!checkInContext || !checkInContext.responses) return null;
    
    const { score, responses } = checkInContext;
    const insights = {
        riskLevel: score < 40 ? 'high' : score < 60 ? 'moderate' : 'low',
        primaryConcerns: [],
        strengths: []
    };
    
    // Analyser chaque dimension
    if (responses.stress >= 7) insights.primaryConcerns.push('stress_high');
    if (responses.energy <= 4) insights.primaryConcerns.push('energy_low');
    if (responses.workload <= 4) insights.primaryConcerns.push('workload_difficult');
    if (responses.support <= 4) insights.primaryConcerns.push('support_low');
    if (responses.satisfaction <= 4) insights.primaryConcerns.push('satisfaction_low');
    
    // Identifier les forces
    if (responses.stress <= 3) insights.strengths.push('stress_managed');
    if (responses.energy >= 7) insights.strengths.push('energy_high');
    if (responses.support >= 7) insights.strengths.push('support_strong');
    if (responses.satisfaction >= 7) insights.strengths.push('satisfaction_high');
    
    return insights;
}

// Fonction pour g√©n√©rer une validation empathique
function generateEmpathicValidation(analysis, language) {
    const validations = {
        fr: {
            stress: ["Je comprends que vous traversez une p√©riode stressante. C'est tout √† fait normal de ressentir cela. ", "Il est important de reconna√Ætre ce stress que vous ressentez. "],
            fatigue: ["La fatigue que vous d√©crivez est un signal important de votre corps. ", "Je reconnais cette sensation d'√©puisement que vous exprimez. "],
            sadness: ["Ces sentiments difficiles que vous partagez sont l√©gitimes. ", "Il faut du courage pour exprimer ces √©motions. "],
            default: ["Merci de partager votre situation avec moi. ", "Je vous √©coute et comprends vos pr√©occupations. "]
        },
        en: {
            stress: ["I understand you're going through a stressful period. It's completely normal to feel this way. ", "It's important to acknowledge the stress you're experiencing. "],
            fatigue: ["The fatigue you're describing is an important signal from your body. ", "I recognize this feeling of exhaustion you're expressing. "],
            sadness: ["These difficult feelings you're sharing are legitimate. ", "It takes courage to express these emotions. "],
            default: ["Thank you for sharing your situation with me. ", "I hear you and understand your concerns. "]
        }
    };
    
    const langValidations = validations[language] || validations.en;
    const primaryEmotion = analysis.emotions[0] || 'default';
    const validationOptions = langValidations[primaryEmotion] || langValidations.default;
    
    return validationOptions[Math.floor(Math.random() * validationOptions.length)];
}

// Fonction pour g√©n√©rer des conseils sp√©cifiques
function generateSpecificAdvice(analysis, contextualInsights, language) {
    // Cette fonction g√©n√®re des conseils bas√©s sur l'analyse du message et du contexte
    const advice = {
        fr: {
            stress: [
                "Essayez la technique de respiration 4-7-8 : inspirez 4 secondes, retenez 7 secondes, expirez 8 secondes. R√©p√©tez 3 fois pour un effet imm√©diat.",
                "Prenez une pause de 5 minutes toutes les heures. M√™me une courte marche peut r√©duire significativement le stress.",
                "Identifiez vos 3 principales sources de stress aujourd'hui. Laquelle pourriez-vous √©liminer ou r√©duire d√®s maintenant ?"
            ],
            fatigue: [
                "Hydratez-vous imm√©diatement avec un grand verre d'eau. La d√©shydratation amplifie la fatigue.",
                "Faites 10 respirations profondes en vous concentrant sur l'expiration. Cela oxyg√®ne le cerveau.",
                "V√©rifiez votre posture : redressez-vous, √©tirez le cou et les √©paules pendant 30 secondes."
            ],
            motivation: [
                "Fixez-vous un objectif tr√®s petit pour les 30 prochaines minutes. Le succ√®s g√©n√®re la motivation.",
                "Rappelez-vous pourquoi ce travail a du sens pour vous personnellement.",
                "Changez votre environnement : travaillez depuis un autre endroit si possible."
            ]
        },
        en: {
            stress: [
                "Try the 4-7-8 breathing technique: inhale 4 seconds, hold 7 seconds, exhale 8 seconds. Repeat 3 times for immediate effect.",
                "Take a 5-minute break every hour. Even a short walk can significantly reduce stress.",
                "Identify your top 3 stress sources today. Which one could you eliminate or reduce right now?"
            ],
            fatigue: [
                "Hydrate immediately with a large glass of water. Dehydration amplifies fatigue.",
                "Take 10 deep breaths focusing on the exhale. This oxygenates the brain.",
                "Check your posture: straighten up, stretch your neck and shoulders for 30 seconds."
            ],
            motivation: [
                "Set a very small goal for the next 30 minutes. Success generates motivation.",
                "Remember why this work matters to you personally.",
                "Change your environment: work from another location if possible."
            ]
        }
    };
    
    const langAdvice = advice[language] || advice.en;
    const primaryEmotion = analysis.emotions[0] || 'stress';
    const adviceOptions = langAdvice[primaryEmotion] || langAdvice.stress;
    
    let selectedAdvice = adviceOptions[Math.floor(Math.random() * adviceOptions.length)];
    
    // Ajouter des conseils contextuels si disponible
    if (contextualInsights && contextualInsights.riskLevel === 'high') {
        const urgentNote = language === 'fr' 
            ? "\n\n‚ö†Ô∏è Votre score de bien-√™tre indique que vous pourriez b√©n√©ficier d'un soutien suppl√©mentaire. N'h√©sitez pas √† contacter votre manager ou les ressources RH."
            : "\n\n‚ö†Ô∏è Your wellbeing score indicates you might benefit from additional support. Don't hesitate to contact your manager or HR resources.";
        selectedAdvice += urgentNote;
    }
    
    return "\n\n" + selectedAdvice;
}

// Fonction pour g√©n√©rer une conclusion engageante
function generateEngagementClosing(analysis, language) {
    const closings = {
        fr: [
            "\n\nComment vous sentez-vous par rapport √† cette suggestion ? Y a-t-il un aspect particulier sur lequel vous aimeriez que nous nous concentrions ?",
            "\n\nQuelle est la premi√®re petite action que vous pourriez mettre en place d√®s maintenant ?",
            "\n\nAvez-vous d√©j√† essay√© des techniques similaires ? Qu'est-ce qui fonctionne le mieux pour vous habituellement ?"
        ],
        en: [
            "\n\nHow do you feel about this suggestion? Is there a particular aspect you'd like us to focus on?",
            "\n\nWhat's the first small action you could implement right now?",
            "\n\nHave you tried similar techniques before? What usually works best for you?"
        ]
    };
    
    const langClosings = closings[language] || closings.en;
    return langClosings[Math.floor(Math.random() * langClosings.length)];
}

// Fonction pour am√©liorer la r√©ponse de bien-√™tre
function enhanceWellnessResponse(response, checkInContext, language) {
    if (!response) return generateEmergencyWellnessResponse(language);
    
    // Ajouter un pr√©fixe contextuel si n√©cessaire
    if (checkInContext && checkInContext.score < 40) {
        const urgentPrefix = language === 'fr' 
            ? "ü§ó Je remarque que votre bien-√™tre n√©cessite une attention particuli√®re. "
            : "ü§ó I notice your wellbeing needs particular attention. ";
        
        if (!response.includes('‚ö†Ô∏è') && !response.includes('ü§ó')) {
            response = urgentPrefix + response;
        }
    }
    
    // S'assurer que la r√©ponse n'est pas trop longue
    if (response.length > 800) {
        const sentences = response.split('. ');
        response = sentences.slice(0, 3).join('. ') + '.';
    }
    
    return response;
}

// Fonction pour g√©n√©rer une r√©ponse d'urgence
function generateEmergencyWellnessResponse(language, errorDetails = '') {
    const responses = {
        fr: [
            "ü§ó Je rencontre une difficult√© technique, mais je reste l√† pour vous accompagner. En attendant, prenez trois respirations profondes et rappelez-vous que vous n'√™tes pas seul(e). Votre bien-√™tre est important.",
            "üíô M√™me si j'ai un petit probl√®me technique, votre bien-√™tre reste ma priorit√©. Prenez un moment pour vous, hydratez-vous, et n'h√©sitez pas √† contacter votre manager ou les ressources RH si vous en ressentez le besoin.",
            "üåü Un souci technique m'emp√™che de vous r√©pondre parfaitement, mais voici un conseil universel : accordez-vous une pause de 5 minutes, sortez prendre l'air si possible, et rappelez-vous que chaque difficult√© est temporaire."
        ],
        en: [
            "ü§ó I'm experiencing a technical difficulty, but I'm still here to support you. In the meantime, take three deep breaths and remember you're not alone. Your wellbeing matters.",
            "üíô Even though I have a small technical issue, your wellbeing remains my priority. Take a moment for yourself, stay hydrated, and don't hesitate to contact your manager or HR resources if needed.",
            "üåü A technical issue prevents me from responding perfectly, but here's universal advice: give yourself a 5-minute break, step outside if possible, and remember that every difficulty is temporary."
        ]
    };
    
    const langResponses = responses[language] || responses.en;
    const selectedResponse = langResponses[Math.floor(Math.random() * langResponses.length)];
    
    // Ajouter les d√©tails d'erreur en mode debug (seulement en d√©veloppement)
    if (process.env.NODE_ENV === 'development' && errorDetails) {
        return selectedResponse + `\n\n[Debug: ${errorDetails}]`;
    }
    
    return selectedResponse;
}

// Statistiques globales (pour RH/Managers)
app.get('/api/statistics', (req, res) => {
    const stats = {
        totalEvaluations: evaluations.length,
        averageWellbeingScore: calculateAverageScore(),
        stressLevels: calculateStressDistribution(),
        recentAlerts: getRecentAlerts(),
        trendsData: getTrendsData()
    };
    
    res.json(stats);
});

// Fonctions utilitaires

function generateRecommendations(score, responses) {
    const recommendations = [];
    
    if (score < 40) {
        recommendations.push({
            type: 'urgent',
            title: 'Support imm√©diat recommand√©',
            description: 'Votre score indique que vous pourriez b√©n√©ficier d\'un soutien professionnel.',
            action: 'schedule_appointment'
        });
    }
    
    if (responses.q1 >= 4) {
        recommendations.push({
            type: 'stress',
            title: 'Gestion du stress',
            description: 'Des techniques de relaxation pourraient vous aider.',
            action: 'meditation_guide'
        });
    }
    
    if (responses.q3 <= 2) {
        recommendations.push({
            type: 'balance',
            title: '√âquilibre vie pro/perso',
            description: 'Consid√©rez des ajustements dans votre emploi du temps.',
            action: 'time_management'
        });
    }
    
    return recommendations;
}

// Fonction pour g√©n√©rer une r√©ponse dynamique bas√©e sur l'analyse du message
function generateDynamicResponse(message, checkInContext, language) {
    const lang = language || 'fr';
    
    // Analyser le message pour comprendre l'intention
    const lowerMessage = message.toLowerCase();
    const keywords = {
        stress: ['stress', 'stress√©', 'pression', 'anxieux', 'angoisse', 'tension'],
        fatigue: ['fatigu√©', '√©puis√©', '√©nergie', 'crev√©', 'tired', 'exhausted'],
        motivation: ['motivation', 'd√©motiv√©', 'envie', 'ennui', 'motivated', 'bored'],
        work: ['travail', 'boulot', 'job', 'work', 'bureau', 'office'],
        team: ['√©quipe', 'coll√®gue', 'manager', 'team', 'colleague', 'boss'],
        balance: ['√©quilibre', 'personnel', 'famille', 'temps', 'balance', 'family', 'time']
    };
    
    // Identifier le th√®me principal
    let mainTheme = 'general';
    let maxMatches = 0;
    
    for (const [theme, words] of Object.entries(keywords)) {
        const matches = words.filter(word => lowerMessage.includes(word)).length;
        if (matches > maxMatches) {
            maxMatches = matches;
            mainTheme = theme;
        }
    }
    
    // G√©n√©rer une r√©ponse vari√©e et concise
    const responseVariations = getResponseVariations(mainTheme, lang);
    const randomIndex = Math.floor(Math.random() * responseVariations.length);
    let response = responseVariations[randomIndex];
    
    // Ajouter du contexte si disponible (de mani√®re concise)
    if (checkInContext && checkInContext.score) {
        const score = checkInContext.score;
        const contextNote = getContextualNote(score, lang);
        if (contextNote) {
            response = contextNote + ' ' + response;
        }
    }
    
    return response;
}

function getResponseVariations(theme, language) {
    const variations = {
        fr: {
            stress: [
                "Essayez la respiration 4-7-8 : inspirez 4 secondes, retenez 7 secondes, expirez 8 secondes. R√©p√©tez 3 fois.",
                "Prenez une pause de 5 minutes toutes les heures. Sortez prendre l'air ou faites quelques √©tirements.",
                "Identifiez vos 3 principales sources de stress aujourd'hui. Laquelle pouvez-vous √©liminer ou r√©duire ?",
                "Pratiquez la technique du 5-4-3-2-1 : nommez 5 choses que vous voyez, 4 que vous touchez, 3 que vous entendez, 2 que vous sentez, 1 que vous go√ªtez.",
                "Organisez vos t√¢ches par priorit√©. Concentrez-vous sur une seule chose √† la fois."
            ],
            fatigue: [
                "Hydratez-vous : buvez un grand verre d'eau et observez votre niveau d'√©nergie dans 10 minutes.",
                "Faites une marche rapide de 2-3 minutes, m√™me √† l'int√©rieur. Le mouvement r√©veille le corps.",
                "V√©rifiez votre posture : redressez-vous, √©tirez le cou et les √©paules.",
                "Prenez une collation riche en prot√©ines : noix, yaourt grec, ou fruits avec du beurre d'amande.",
                "Exposez-vous √† la lumi√®re naturelle pendant quelques minutes si possible."
            ],
            motivation: [
                "Fixez-vous un petit objectif r√©alisable pour les 2 prochaines heures.",
                "Rappelez-vous pourquoi ce travail est important pour vous personnellement.",
                "Changez d'environnement : travaillez depuis un autre endroit si possible.",
                "R√©compensez-vous apr√®s avoir termin√© la prochaine t√¢che.",
                "Parlez √† un coll√®gue de ce sur quoi vous travaillez pour retrouver l'enthousiasme."
            ],
            work: [
                "Clarifiez vos priorit√©s avec votre manager si n√©cessaire.",
                "Documentez vos pr√©occupations et proposez des solutions concr√®tes.",
                "Demandez du feedback sur votre travail r√©cent.",
                "Identifiez les ressources ou formations qui pourraient vous aider.",
                "Planifiez votre journ√©e en blocs de temps d√©di√©s √† chaque t√¢che."
            ],
            team: [
                "Proposez un caf√© ou d√©jeuner informel avec un coll√®gue.",
                "Participez activement √† la prochaine r√©union d'√©quipe.",
                "Offrez votre aide sur un projet o√π vous pourriez contribuer.",
                "Partagez une r√©ussite r√©cente avec l'√©quipe.",
                "Demandez conseil √† un coll√®gue sur un sujet professionnel."
            ],
            balance: [
                "D√©finissez une heure de fin de travail et respectez-la aujourd'hui.",
                "Planifiez une activit√© personnelle agr√©able pour ce soir.",
                "√âteignez les notifications professionnelles apr√®s 19h.",
                "Prenez votre pause d√©jeuner compl√®te, loin de votre bureau.",
                "D√©l√©guez ou reportez une t√¢che non urgente √† demain."
            ],
            general: [
                "Prenez trois respirations profondes et concentrez-vous sur le moment pr√©sent.",
                "Notez une chose positive qui s'est pass√©e aujourd'hui.",
                "Faites une pause de 2 minutes pour vous √©tirer.",
                "Buvez un verre d'eau et prenez un moment pour vous.",
                "Contactez quelqu'un qui vous fait du bien."
            ]
        },
        en: {
            stress: [
                "Try 4-7-8 breathing: inhale 4 seconds, hold 7 seconds, exhale 8 seconds. Repeat 3 times.",
                "Take a 5-minute break every hour. Step outside or do some stretches.",
                "Identify your top 3 stress sources today. Which one can you eliminate or reduce?",
                "Practice the 5-4-3-2-1 technique: name 5 things you see, 4 you touch, 3 you hear, 2 you smell, 1 you taste.",
                "Organize tasks by priority. Focus on one thing at a time."
            ],
            fatigue: [
                "Hydrate: drink a large glass of water and check your energy level in 10 minutes.",
                "Take a quick 2-3 minute walk, even indoors. Movement awakens the body.",
                "Check your posture: straighten up, stretch your neck and shoulders.",
                "Have a protein-rich snack: nuts, Greek yogurt, or fruit with almond butter.",
                "Get some natural light exposure for a few minutes if possible."
            ],
            motivation: [
                "Set a small achievable goal for the next 2 hours.",
                "Remember why this work matters to you personally.",
                "Change your environment: work from another location if possible.",
                "Reward yourself after completing the next task.",
                "Talk to a colleague about what you're working on to regain enthusiasm."
            ],
            work: [
                "Clarify your priorities with your manager if needed.",
                "Document your concerns and propose concrete solutions.",
                "Ask for feedback on your recent work.",
                "Identify resources or training that could help you.",
                "Plan your day in time blocks dedicated to each task."
            ],
            team: [
                "Suggest an informal coffee or lunch with a colleague.",
                "Participate actively in the next team meeting.",
                "Offer help on a project where you could contribute.",
                "Share a recent success with the team.",
                "Ask a colleague for advice on a professional topic."
            ],
            balance: [
                "Set an end-of-work time and stick to it today.",
                "Plan an enjoyable personal activity for tonight.",
                "Turn off work notifications after 7 PM.",
                "Take your full lunch break, away from your desk.",
                "Delegate or postpone a non-urgent task until tomorrow."
            ],
            general: [
                "Take three deep breaths and focus on the present moment.",
                "Write down one positive thing that happened today.",
                "Take a 2-minute break to stretch.",
                "Drink a glass of water and take a moment for yourself.",
                "Contact someone who makes you feel good."
            ]
        }
    };
    
    return variations[language][theme] || variations[language].general;
}

function getContextualNote(score, language) {
    if (language === 'fr') {
        if (score < 40) return "Votre score est pr√©occupant.";
        if (score < 60) return "Votre bien-√™tre pourrait s'am√©liorer.";
        if (score > 80) return "Votre score est excellent !";
        return null;
    } else {
        if (score < 40) return "Your score is concerning.";
        if (score < 60) return "Your wellbeing could improve.";
        if (score > 80) return "Your score is excellent!";
        return null;
    }
}


function calculateAverageScore() {
    if (evaluations.length === 0) return 0;
    const sum = evaluations.reduce((acc, eval) => acc + eval.score, 0);
    return Math.round(sum / evaluations.length);
}

function calculateStressDistribution() {
    const distribution = { low: 0, moderate: 0, high: 0 };
    
    evaluations.forEach(eval => {
        const stressLevel = eval.responses.q1 || 3;
        if (stressLevel <= 2) distribution.low++;
        else if (stressLevel <= 3) distribution.moderate++;
        else distribution.high++;
    });
    
    return distribution;
}

function getRecentAlerts() {
    const alerts = [];
    const recentEvals = evaluations.slice(-10);
    
    recentEvals.forEach(eval => {
        if (eval.score < 40) {
            alerts.push({
                userId: eval.userId,
                type: 'low_wellbeing',
                message: 'Score de bien-√™tre faible d√©tect√©',
                date: eval.date,
                severity: 'high'
            });
        }
        
        if (eval.responses.q1 >= 4) {
            alerts.push({
                userId: eval.userId,
                type: 'high_stress',
                message: 'Niveau de stress √©lev√© signal√©',
                date: eval.date,
                severity: 'medium'
            });
        }
    });
    
    return alerts;
}

function getTrendsData() {
    // Simuler des donn√©es de tendance pour les 7 derniers jours
    const trends = [];
    const today = new Date();
    
    for (let i = 6; i >= 0; i--) {
        const date = new Date(today);
        date.setDate(date.getDate() - i);
        
        trends.push({
            date: date.toISOString().split('T')[0],
            averageScore: 65 + Math.random() * 20,
            evaluationCount: Math.floor(Math.random() * 10) + 5
        });
    }
    
    return trends;
}


// D√©marrer le serveur
app.listen(PORT, () => {
    console.log(`
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                                            ‚ïë
    ‚ïë   üöÄ Agent d'Onboarding Bien-√™tre Mental  ‚ïë
    ‚ïë                                            ‚ïë
    ‚ïë   Serveur d√©marr√© sur:                    ‚ïë
    ‚ïë   http://localhost:${PORT}                    ‚ïë
    ‚ïë                                            ‚ïë
    ‚ïë   Fonctionnalit√©s:                        ‚ïë
    ‚ïë   ‚úÖ Chat IA intelligent                  ‚ïë
    ‚ïë   ‚úÖ √âvaluations de bien-√™tre            ‚ïë
    ‚ïë   ‚úÖ Dashboard personnalis√©              ‚ïë
    ‚ïë   ‚úÖ Recommandations adapt√©es            ‚ïë
    ‚ïë   ‚úÖ Support multilingue (FR/EN)         ‚ïë
    ‚ïë                                            ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    `);
});
